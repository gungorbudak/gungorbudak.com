<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>megablast on Güngör Budak</title>
    <link>https://www.gungorbudak.com/blog/tag/megablast/</link>
    <description>Recent content in megablast on Güngör Budak</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 09 Aug 2012 09:15:00 +0300</lastBuildDate><atom:link href="https://www.gungorbudak.com/blog/tag/megablast/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SRS&#39;de Coklu Arama Yapmak</title>
      <link>https://www.gungorbudak.com/blog/2012/08/09/srsde-coklu-arama-yapmak/</link>
      <pubDate>Thu, 09 Aug 2012 09:15:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/08/09/srsde-coklu-arama-yapmak/</guid>
      <description>Inceleme yapan scriptin en son hali, oncekilere gore daha fazla okuma inceliyor oldugu icin her okuma icin SRS uzerinde isim aramak oldukca zaman alan bir islemdi. Oyle ki, son inceleme 4 gun surdu.
Bunu azaltmak icin inceleme scriptini tamamen degistirdim. Oncelikle her zaman oldugu gibi esik degerini gecenleri aliyor ama direkt bunlarin ID numaralarini bir dizide (array) listeliyorum. Daha sonra bu listenin herbir elemanini boru karakteri ile ayirarak bir string haline getiriyorum.</description>
    </item>
    
    <item>
      <title>MegaBLAST Sonuclarini Incelemek - Parsing</title>
      <link>https://www.gungorbudak.com/blog/2012/08/09/megablast-sonuclarini-incelemek-parsing/</link>
      <pubDate>Thu, 09 Aug 2012 09:14:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/08/09/megablast-sonuclarini-incelemek-parsing/</guid>
      <description>Pipeline&amp;rsquo;da son asama, aranan dizilerin urettigi ciktilari baska bir script ile incelemek. Bu islemle herbir megablast dosyasi okunuyor, ve dizilerin name, identity, overlapping length gibi parametrelerinin degerleri saklanarak amaca yonelik sekilde ekrana yazdiriliyor.
Projemde HUSAR paketinde bulunan ve yukarida bahsettigim alanlari bana dizi olarak donduren Inslink adinda bir parser kullaniyorum. Bu parserin yaptigi tek sey, dosyayi okumak ve dosyadaki istenen alanlarin degerlerini saklamak.
Daha sonra ben bu saklanan degerleri, koda eklemeler yaparak gosteriyorum ve birkac ek kod ile de ihtiyacim olan anlamli sonuclar gosteriyorum.</description>
    </item>
    
    <item>
      <title>Kalite Satirinin Degerlendirilmesi - Quality Filter</title>
      <link>https://www.gungorbudak.com/blog/2012/08/09/kalite-satirinin-degerlendirilmesi/</link>
      <pubDate>Thu, 09 Aug 2012 08:48:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/08/09/kalite-satirinin-degerlendirilmesi/</guid>
      <description>Kirleten organizma (konaminant) analizi yapacak olan pipeline&amp;rsquo;i daha fazla gelistirmek, daha anlamli sonuclar elde etmek icin ilk adimlara (henuz fastq dosyasini isliyorken) kalite filtresi eklemeyi dusunduk. Boylece belirli bir esik degerinden dusuk okumalari daha o asamadan filtreleyerek daha guvenilir sonuclar elde elebilecegiz.
Bu kalite kontrolunu fastq dosyasinda her okumanin 4. satirini anlayarak yapacagiz. Bu 4. satir (aslinda okumanin dizileme kalite skoru), cesitli dizileme cihazlari tarafindan cesitli sekillerde yaziliyor (kodlaniyor) ve bu kodlamadan tekrar kalite skorunu elde ederek filtreleme uygulanmasi gerekiyor.</description>
    </item>
    
    <item>
      <title>Inceleme Sonuclarini &#34;Ambiguous&#34; Olarak Ayirmak</title>
      <link>https://www.gungorbudak.com/blog/2012/08/02/inceleme-sonuclarini-ambiguous-olarak/</link>
      <pubDate>Thu, 02 Aug 2012 06:03:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/08/02/inceleme-sonuclarini-ambiguous-olarak/</guid>
      <description>Cesitli veritabanlarina karsi yaptigim aramalardan aldigim sonuclari incelerken, bunlari cesitli esik degerleri ile degerlendirmek ile beraber belirlenen esik degerlerinin uzerinde ya da altinda olan hitleri &amp;ldquo;Ambiguous&amp;rdquo; (belirsiz, cok anlamli) ya da &amp;ldquo;Unique&amp;rdquo; (essiz, tek) olarak ayirarak daha da anlamli hale getirmeye calisiyorum.
&amp;ldquo;Ambiguous&amp;rdquo; olarak, her bir megablast dosyasinda esik degerlerine uygun ancak birden fazla farkli organizmayi iceren hitleri etiketliyorum. Eger her esik degerine uygun hit, tek bir dosya icinde her zaman ayni organizmaya ait ise bu durumda yaptigim sey onu &amp;ldquo;unique&amp;rdquo; olarak etiketlemek.</description>
    </item>
    
    <item>
      <title>Birden Fazla Dizi Dosyalarindan MegaBLAST&#39;i Calistirmak</title>
      <link>https://www.gungorbudak.com/blog/2012/07/26/birden-fazla-dizi-dosyalarindan-megablast-calistirmak/</link>
      <pubDate>Thu, 26 Jul 2012 07:48:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/07/26/birden-fazla-dizi-dosyalarindan-megablast-calistirmak/</guid>
      <description>Asagidaki scripti, pipeline&amp;rsquo;in MegaBLAST aramasini daha hizli yapabilmek icin dusundugumuz bir teknige uygun olabilmesi icin yazdim. Yaptigi sey, her okuma icin olusturulmus ve formatlanmis dizi dosyalarini kullanarak veritabanlarinda belirtilen baslangic noktasi ve okuma sayisi ile arama yapmak.
#!user/local/bin/perl $database = $ARGV[0]; $dir = $ARGV[1]; #directory for sequences $sp = $ARGV[2]; #starting point $n = $ARGV[3] + $sp; while (1) { system(&amp;#34;blastplus -programname=megablast $dir/read_$sp.seq $database -OUTFILE=read_$sp.megablast -nobatch -d&amp;#34;); $sp++; last if ($sp == $n); } Burada her sey gercekten cok basit bir programlama ile isliyor.</description>
    </item>
    
    <item>
      <title>Tek FASTA Dosyasindan MegaBLAST&#39;i Calistirmak - Duzenli Ifadeler</title>
      <link>https://www.gungorbudak.com/blog/2012/07/23/tek-fasta-dosyasindan-megablast-calistirmak/</link>
      <pubDate>Mon, 23 Jul 2012 05:49:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/07/23/tek-fasta-dosyasindan-megablast-calistirmak/</guid>
      <description>Asagida MegaBLAST&amp;rsquo;i FASTA dosyasi okuyarak calistirmak ve sonuclari bir dizinde toplayabilmek amaciyla yazdigim Perl scripti ve onun aciklamasi var. Bu script tasarlamakta oldugum pipeline&amp;rsquo;in onemli bir parcasi. Bu script ilk yazdigim olan ve sadece bir FASTA dosyasi uzerinden tum okumalara ulasabilen script.
#!user/local/bin/perl $database = $ARGV[0]; $fasta = $ARGV[1]; #input file $sp = $ARGV[2]; #starting point $n = $ARGV[3] + $sp; if(!defined($n)){$n=12;} #set default number open FASTA, $fasta or die $!</description>
    </item>
    
    <item>
      <title>Unix&#39;te Perl Ile Bir Komut Ciktisini Okumak ve Duzenli Ifadeler</title>
      <link>https://www.gungorbudak.com/blog/2012/07/23/unixte-perl-ile-bir-komut-ciktisini-okumak/</link>
      <pubDate>Mon, 23 Jul 2012 05:06:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/07/23/unixte-perl-ile-bir-komut-ciktisini-okumak/</guid>
      <description>Daha once organizma isimlerini duzenli ifadelerle nasil cikardigimi anlatmistim. Burada, gene benzer bir seyden bahsedecegim ancak bu biraz daha fazla, ozel bir teknikle Perl&amp;rsquo;de yapilan, veri tabanindan bilgileri birden fazla satir halinde cikti olarak aldigim icin gerek duydugum cok yararli bir yontem. Mutlaka benzerini baska amaclarla da kullanabilir, yararlanabilirsiniz.
Bu ihtiyac, HUSAR gurubu tarafindan olusturulan honest veritabaninin organizma isimlerini direkt sunmamasi ancak birkac satir halinde gostermesi sebebiyle dogdu. Asagida bunun ornegini gorebilirsiniz.</description>
    </item>
    
    <item>
      <title>Duzenli Ifadeler ile Tur Ismini Elde Etmek</title>
      <link>https://www.gungorbudak.com/blog/2012/07/23/duzenli-ifadeler-ile-tur-ismini-elde/</link>
      <pubDate>Mon, 23 Jul 2012 04:19:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/07/23/duzenli-ifadeler-ile-tur-ismini-elde/</guid>
      <description>Projemin sonunda kullaniciya olasi kirleten organizmalarin adlarini (Latince tur isimleri) gosterecegim icin, MegaBLAST sonuclarindaki erisim numaralarini (accession number) kullanarak her dizi icin organizma adlarini elde etmem gerekiyor. Sequence Retrival System (SRS) adinda, HUSAR sunucularinda bulunan baska bir sistem ile bunu yapabiliyorum.
SRS&amp;rsquo;ten organizma adini ogrenebilmem icin Unix komut satirinda &amp;ldquo;getz&amp;rdquo; komutuyla birlikte veritabani ismi, erisim numarasi ve ogrenmek istedigim alani yazmam yetiyor. Asagida, bu isi yapabilen ornek bir kod bulabilirsiniz.</description>
    </item>
    
    <item>
      <title>Bir MegaBLAST Ciktisi Icerigi - RefSeq Veritabani</title>
      <link>https://www.gungorbudak.com/blog/2012/07/19/bir-megablast-ciktisi-icerigi-refseq/</link>
      <pubDate>Thu, 19 Jul 2012 09:35:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/07/19/bir-megablast-ciktisi-icerigi-refseq/</guid>
      <description>Asagida, deneme FASTA dosyasini refseq_genomic veritabaninda arayarak elde ettigim dosyadan, bir hitin ayrintilarini goruyoruz.
&amp;gt;&amp;gt;&amp;gt;&amp;gt;refseq_genomic_complete3: AC_000033_0310 Continuation (311 of 1357) of AC_000033 from base 31000001 (AC_000033 Mus musculus strain mixed chromosome 11, alternate assembly Mm_Celera, whole genome shotgun sequence. 2/2012) Length = 110000 Score = 115 bits (58), Expect = 4e-22 Identities = 74/79 (93%), Gaps = 2/79 (2%) Strand = Plus / Minus Query: 1 ctctctctgtct-tctctctctctctgtctctctctctttctctctcttctctctctctc 59 |||||||||||| ||| ||||||||| ||||||||||| ||||||||||||||||||||| Sbjct: 89773 ctctctctgtctgtctttctctctctctctctctctctctctctctcttctctctctctc 89714 Query: 60 tttctctctgccctctctc 78 ||||||||| ||||||||| Sbjct: 89713 tttctctct-ccctctctc 89696 Ayrintilarda, ilk olarak &amp;gt;&amp;gt;&amp;gt;&amp;gt; karakterleriyle hit ile ilgili baslik bilgisi veriyor.</description>
    </item>
    
    <item>
      <title>MegaBLAST Aramasini Hizlandirma</title>
      <link>https://www.gungorbudak.com/blog/2012/07/16/megablast-aramasini-hizlandirma/</link>
      <pubDate>Mon, 16 Jul 2012 04:54:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/07/16/megablast-aramasini-hizlandirma/</guid>
      <description>Son zamanlarda sadece farkli veritabanlarinda, MegaBLAST&amp;rsquo;i en cabuk ve etkili bir sekilde calistirmanin yolunu ariyorum ve FASTA dosyasi olusturma asamasinda, gercekten cokca ise yarayan bir yontem danismanim tarafindan geldi.
Daha once tum dizilerin bulundugu tek bir FASTA dosyasindan arama yapiyordum ve bu zaman kaybina yol aciyordu. Her ne kadar dosya bir sefer acilsa da her seferinde dosya icinde satirlara gidip onu okuman, zaman alan bir islem. Bunu, dosyadaki her okumayi, ayri bir FASTA dosyasi haline getirerek cozduk.</description>
    </item>
    
    <item>
      <title>Veritabanina Gore Bir Komutun Calisma Suresi - CPU Runtime</title>
      <link>https://www.gungorbudak.com/blog/2012/07/16/veritabanina-gore-bir-komutun-calisma/</link>
      <pubDate>Mon, 16 Jul 2012 04:17:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/07/16/veritabanina-gore-bir-komutun-calisma/</guid>
      <description>Calisilan dosyalar, veritabanları buyuk olunca ve yeterince bilgisayar gucune sahip olmayınca, her seyden once olcmemiz gereken nasil en etkili ve kisa surede sonucu alabiliyor olmamizdir.
Özellikle projemde, farkli veritabanları ve farkli parametreler kullanarak, bunları arastiriyorum.
Şimdilik dort veritabani deniyorum, bunlar: nrnuc, ensembl_cdna, honest ve refseq_genomic. Ayrica, bunu farkli iki kelime uzunluğuna gore de yapacagim. Kelime uzunluğu (word size) MegaBLAST&amp;rsquo;in ararken tam olarak eslestirecegi baz cifti sayisi. Yani elimde 151 baz ciftine sahip bir dizilim varsa, ve eger kelime uzunluğu 50 olarak belirlenmişse, bu 151 baz cifti icinden herhangi bir yerden baslayan ama arka arkaya en az 50 bazin dizilendiği kisimlar aranacak.</description>
    </item>
    
    <item>
      <title>FASTQ&#39;dan FASTA&#39;ya Donusturme Perl Scripti</title>
      <link>https://www.gungorbudak.com/blog/2012/07/13/fastqdan-fastaya-donusturme-perl/</link>
      <pubDate>Fri, 13 Jul 2012 05:05:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/07/13/fastqdan-fastaya-donusturme-perl/</guid>
      <description>FASTQ ve FASTA formatlari aslinda ayni bilgiyi iceren ancak birinde sadece herbir dizi icin iki satir daha az bilginin bulundugu dosya formatlari. Projemde onemli olan diger bir farklari ise FASTA formatinin direkt olarak MegaBLAST arama yapilabilmesi. Iste bu yuzden, genetik dizilim yapan makinelerin olusturdugu FASTQ formatini FASTA&amp;rsquo;ya cevirmem gerekiyor. Ve bu script pipeline&amp;rsquo;in ilk adimi.
Aslinda deneme amacli aldigim genetk dizilimin, bana bunu ulastiran tarafindan eslestirmesinin yapilmadigi icin, bir on adim olarak bu eslestirmeyi yapmistim.</description>
    </item>
    
    <item>
      <title>SAM Dosyası - BAM Dosyası - samtools</title>
      <link>https://www.gungorbudak.com/blog/2012/07/04/sam-dosyasi-bam-dosyasi-samtools/</link>
      <pubDate>Wed, 04 Jul 2012 20:36:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/07/04/sam-dosyasi-bam-dosyasi-samtools/</guid>
      <description>Aslında programlamam gereken pipeline direkt olarak eşleşmeyen okumalar üzerinden analizler yapacak. Ancak böyle bir veri bulamadiığım için, elimdeki tek veri eşleşen ve eşleşmeyen okumaları içerdiği için önce eşleşenlerden kurtulmam gerekti.
Bunu daha önce de belirttiğim gibi bwa eşleştiricisi (aligner - mapper) ile yapıyorum. bwa bir dizi işlemden sonra SAM dosyası oluşturuyor ancak benim FASTQ dosyasına ihtiyacım var. Bunun için SAM dosyasını samtools1 ile benzer bir format olan BAM dosyasına çevirip, daha sonra da bam2fastq2 aracı ile FASTQ dosyamı elde edeceğim.</description>
    </item>
    
    <item>
      <title>MegaBLAST - Dizilerdeki Benzerlikleri Bulma Aracı</title>
      <link>https://www.gungorbudak.com/blog/2012/06/28/megablast-dizilerdeki-benzerlikleri/</link>
      <pubDate>Thu, 28 Jun 2012 10:49:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/06/28/megablast-dizilerdeki-benzerlikleri/</guid>
      <description>MegaBLAST, HUSAR paketinde bulunan, BLAST (Basic Local Alignment Search Tool) paketinin bir parçası. Ayrıca BLASTN&amp;rsquo;in bir değişik türü. MegaBLAST uzun dizileri BLASTN&amp;rsquo;den daha etkili bir şekilde işliyor ve hem de çok daha hızlı işlem yapiyor ancak daha az duyarlı. Bu yüzden benzer dizileri geniş veri tabanlarında aramaya çok uygun bir araç.
Yazacağım program çoklu dizilim barındıran FASTA dosyasını alacak ve megablast komutunu çalıştıracak. Daha sonra da her okuma için bir .</description>
    </item>
    
    <item>
      <title>Kontaminant (Kirletici) Analizi Projesi</title>
      <link>https://www.gungorbudak.com/blog/2012/06/27/kontaminant-kirletici-analizi-projesi/</link>
      <pubDate>Wed, 27 Jun 2012 11:24:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/06/27/kontaminant-kirletici-analizi-projesi/</guid>
      <description>Başlangıç olarak, araçlara, programlama diline, kısacası biyoenformatiğe alışabilmem için bana verilen bu ufak projeyi ayrıntılı olarak anlatacağım.
Biliyoruz ki, laboratuvar çalışmalarımızda ne kadar önlemeye çalışsak da kontaminant riski hep bulunuyor. Bunu ne kadar aza indirsek o kadar iyi, ki daha sonra bunun miktarını bulup, bunun üzerinden sonucumuzun bir başka değerlendirmesini de yapabiliriz. İşte bunu bulmak için bir yöntem, DNA analizi. Çalıştığınız örneğinizin DNA&amp;rsquo;sı dizileniyor ve bu DNA çeşitli programlarla analiz edilip, kirleten organizmaları DNA&amp;rsquo;larından ortaya çıkarabiliyoruz</description>
    </item>
    
    <item>
      <title>FASTQ Formatı - FASTQ Dosyası</title>
      <link>https://www.gungorbudak.com/blog/2012/06/25/fastq-format-fastq-dosyasi/</link>
      <pubDate>Mon, 25 Jun 2012 11:01:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/06/25/fastq-format-fastq-dosyasi/</guid>
      <description>Bugün programı oluştururken kullanacağım &amp;ldquo;test&amp;rdquo; dizilimini aldım. İki adet FASTQ dosyasından oluşuyor, her biri sıkıştırılmış ama buna rağmen boyutları 6 GB civarı. Ben elbette çok zaman kaybetmek istemediğim için bu dosyalardan birinin sadece bir kısmını kullanacağım.
Amacım, bu FASTQ dosyalarındaki eşleşebilen okumaları BWA aracı ile bularak, daha sonra onları çıkarmak. Ve kalan eşleşemeyen okumaları MegaBLAST aracının anlayabileceği bir dilde (FASTA formatında) kaydetmek.
Bu arada tüm projeyi bir Unix bilgisayarda hazırladığım için birçok komut öğreniyorum, daha sonra bunları ayrıca yazmaya çalışacağım.</description>
    </item>
    
    <item>
      <title>Dizileme Çalışmalarını Kirleten Organizmaları Tespit Etme</title>
      <link>https://www.gungorbudak.com/blog/2012/06/20/dizileme-calismalarini-kirleten/</link>
      <pubDate>Wed, 20 Jun 2012 13:46:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/06/20/dizileme-calismalarini-kirleten/</guid>
      <description>Bu yaz stajımda ilk olarak başlayacağım çalışma yavaş yavaş şekilleniyor. Bu çalışmada bir pipeline oluşturup, bunu laboratuvarlarda dizileme (sequencing) örneklerini kirleten organizmaları bulmaya çalışacağım.
Laboratuvarlarda birçok nedenden dolayı örnekler başka organizmalar ya da yabancı DNA tarafından kirlenebiliyor. Bunlar bakteri, maya olabilir ya da bir virüs DNA&amp;rsquo;sı da olabilir. Siz bir DNA&amp;rsquo;yı diziledikten sonra onun referansıyla eşleştirme çok az oranda çıkabiliyor. Bu da yabancı DNA&amp;rsquo;nın olabileceğini gösteriyor. Bir başka neden referans DNA&amp;rsquo;nın farklı olması da olabilir.</description>
    </item>
    
  </channel>
</rss>
