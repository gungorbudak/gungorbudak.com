<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>parsing on Güngör Budak</title>
    <link>https://www.gungorbudak.com/blog/tag/parsing/</link>
    <description>Recent content in parsing on Güngör Budak</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 09 Aug 2012 09:14:00 +0300</lastBuildDate><atom:link href="https://www.gungorbudak.com/blog/tag/parsing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MegaBLAST Sonuclarini Incelemek - Parsing</title>
      <link>https://www.gungorbudak.com/blog/2012/08/09/megablast-sonuclarini-incelemek-parsing/</link>
      <pubDate>Thu, 09 Aug 2012 09:14:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/08/09/megablast-sonuclarini-incelemek-parsing/</guid>
      <description>Pipeline&amp;rsquo;da son asama, aranan dizilerin urettigi ciktilari baska bir script ile incelemek. Bu islemle herbir megablast dosyasi okunuyor, ve dizilerin name, identity, overlapping length gibi parametrelerinin degerleri saklanarak amaca yonelik sekilde ekrana yazdiriliyor.
Projemde HUSAR paketinde bulunan ve yukarida bahsettigim alanlari bana dizi olarak donduren Inslink adinda bir parser kullaniyorum. Bu parserin yaptigi tek sey, dosyayi okumak ve dosyadaki istenen alanlarin degerlerini saklamak.
Daha sonra ben bu saklanan degerleri, koda eklemeler yaparak gosteriyorum ve birkac ek kod ile de ihtiyacim olan anlamli sonuclar gosteriyorum.</description>
    </item>
    
  </channel>
</rss>
