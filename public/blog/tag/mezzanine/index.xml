<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mezzanine on Güngör Budak</title>
    <link>https://www.gungorbudak.com/blog/tag/mezzanine/</link>
    <description>Recent content in mezzanine on Güngör Budak</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 06 Aug 2015 14:52:10 +0300</lastBuildDate><atom:link href="https://www.gungorbudak.com/blog/tag/mezzanine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ImportError: Reportlab Version 2.1&#43; is needed</title>
      <link>https://www.gungorbudak.com/blog/2015/08/06/importerror-reportlab-version-21-is-needed/</link>
      <pubDate>Thu, 06 Aug 2015 14:52:10 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/08/06/importerror-reportlab-version-21-is-needed/</guid>
      <description>Little bug in xhtml2pdf version 0.0.5. To fix:
$ sudo nano /usr/local/lib/python2.7/dist-packages/xhtml2pdf/util.py Change the following lines:
if not (reportlab.Version[0] == &amp;#34;2&amp;#34; and reportlab.Version[2] &amp;gt;= &amp;#34;1&amp;#34;): raise ImportError(&amp;#34;Reportlab Version 2.1+ is needed!&amp;#34;) REPORTLAB22 = (reportlab.Version[0] == &amp;#34;2&amp;#34; and reportlab.Version[2] &amp;gt;= &amp;#34;2&amp;#34;) With these lines:
if not (reportlab.Version[:3] &amp;gt;= &amp;#34;2.1&amp;#34;): raise ImportError(&amp;#34;Reportlab Version 2.1+ is needed!&amp;#34;) REPORTLAB22 = (reportlab.Version[:3] &amp;gt;= &amp;#34;2.1&amp;#34;) </description>
    </item>
    
    <item>
      <title>Mezzanine BS Banners Translation with django-modeltranslation</title>
      <link>https://www.gungorbudak.com/blog/2015/07/01/mezzanine-bs-banners-translation-with/</link>
      <pubDate>Wed, 01 Jul 2015 14:30:29 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/07/01/mezzanine-bs-banners-translation-with/</guid>
      <description>Mezzanine BS Banners is a nice app for implementing Bootstrap 3 banners/sliders to your Mezzanine projects. The Banners model in BS Banners app has a title and its stacked inline Slides model has title and content for translation.
After [installing and setting up Django/Mezzanine translations]({% post_url 2015-07-01-djangomezzanine-content-translation-for-mezzanine %}):
Create a translation.py inside your Mezzanine project or your custom theme/skin application and copy/paste following lines:
from modeltranslation.translator import translator from mezzanine.core.translation import TranslatedSlugged, TranslatedRichText from mezzanine_bsbanners.</description>
    </item>
    
    <item>
      <title>Django/Mezzanine Content Translation for Mezzanine Built-in Applications</title>
      <link>https://www.gungorbudak.com/blog/2015/07/01/djangomezzanine-content-translation-for-mezzanine/</link>
      <pubDate>Wed, 01 Jul 2015 12:18:05 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/07/01/djangomezzanine-content-translation-for-mezzanine/</guid>
      <description>As Mezzanine comes with additional Django applications such as pages, galleries and to translate their content, Mezzanine supports django-modeltranslation integration.
Install django-modeltranslation:
pip install django-modeltranslation Add following to the INSTALLED_APPS in settings.py:
&amp;#34;modeltranslation&amp;#34;, And following in settings.py:
USE_MODELTRANSLATION = True Also, move mezzanine.pages to the top of other Mezzanine apps in INSTALLED_APPS in settings.py like so:
&amp;#34;mezzanine.pages&amp;#34;, &amp;#34;mezzanine.boot&amp;#34;, &amp;#34;mezzanine.conf&amp;#34;, &amp;#34;mezzanine.core&amp;#34;, &amp;#34;mezzanine.generic&amp;#34;, &amp;#34;mezzanine.blog&amp;#34;, &amp;#34;mezzanine.forms&amp;#34;, &amp;#34;mezzanine.galleries&amp;#34;, &amp;#34;mezzanine.twitter&amp;#34;, &amp;#34;mezzanine.accounts&amp;#34;, &amp;#34;mezzanine.mobile&amp;#34;, Run following to create fields in database tables for translations:</description>
    </item>
    
    <item>
      <title>Configuring Mezzanine for Apache server &amp; mod_wsgi in AWS</title>
      <link>https://www.gungorbudak.com/blog/2015/05/09/configuring-mezzanine-for-apache-server-modwsgi/</link>
      <pubDate>Sat, 09 May 2015 13:21:59 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/05/09/configuring-mezzanine-for-apache-server-modwsgi/</guid>
      <description>Install [Mezzanine]({% post_url 2015-05-01-how-to-install-mezzanine-on-ubuntulinux-mint %}), [Apache server]({% post_url 2015-05-08-getting-started-with-your-aws-instance-and %}) and mod_wsgi:
sudo apt-get install libapache2-mod-wsgi sudo a2enmod wsgi Set up a MySQL database for your Mezzanine project
Read [my post on how to set up a MySQL database for a Mezzanine project]({% post_url 2015-05-09-how-to-set-up-a-mysql-database-for-a-mezzanine %})
Collect static files:
python manage.py collectstatic Configure your Apache server configuration for the project like following:
WSGIPythonPath /home/ubuntu/www/mezzanine-project &amp;lt;VirtualHost *:80&amp;gt; #ServerName example.com ServerAdmin admin@example.com DocumentRoot /home/ubuntu/www/mezzanine-project WSGIScriptAlias / /home/ubuntu/www/mezzanine-project/wsgi.</description>
    </item>
    
    <item>
      <title>How to Set Up a MySQL Database for a Mezzanine Project</title>
      <link>https://www.gungorbudak.com/blog/2015/05/09/how-to-set-up-a-mysql-database-for-a-mezzanine/</link>
      <pubDate>Sat, 09 May 2015 13:21:10 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/05/09/how-to-set-up-a-mysql-database-for-a-mezzanine/</guid>
      <description>Install MySQL server and python-mysqldb package:
sudo apt-get install mysql-server sudo apt-get install python-mysqldb Run MySQL:
mysql -u root -p Create a database:
mysql&amp;gt; create database mezzanine_project; Confirm it:
mysql&amp;gt; show databases; Exit:
mysql&amp;gt; exit Configure local_settings.py:
cd path/to/your/mezzanine/projectnano local_settings.py Like following:
DATABASES = { &amp;#34;default&amp;#34;: { &amp;#34;ENGINE&amp;#34;: &amp;#34;django.db.backends.mysql&amp;#34;, &amp;#34;NAME&amp;#34;: &amp;#34;mezzanine_project&amp;#34;, &amp;#34;USER&amp;#34;: &amp;#34;root&amp;#34;, &amp;#34;PASSWORD&amp;#34;: &amp;#34;123456&amp;#34;, &amp;#34;HOST&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;PORT&amp;#34;: &amp;#34;&amp;#34;, } } Note: Replace your password</description>
    </item>
    
    <item>
      <title>Setting Up Mezzanine Projects in AWS</title>
      <link>https://www.gungorbudak.com/blog/2015/05/08/setting-up-mezzanine-projects-in-aws/</link>
      <pubDate>Fri, 08 May 2015 13:40:27 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/05/08/setting-up-mezzanine-projects-in-aws/</guid>
      <description>Go to EC2 management console, Security groups and add a Custom TCP inbound rule with port 8000. Select &amp;ldquo;Anywhere&amp;rdquo; from the list.
Then follow [this to install Mezzanine]({% post_url 2015-05-01-how-to-install-mezzanine-on-ubuntulinux-mint %})
Above tutorial is also explains setting up a site record. Mezzanine default site record is 127.0.0.1:8000 which should be 0.0.0.0:8000 in our case. So, enter 0.0.0.0:8000 when you’re asked to enter a site record when you ru
python manage.py createdb Also, you might still need to provide this site record while running the development server:</description>
    </item>
    
    <item>
      <title>How to Install Mezzanine on Ubuntu/Linux Mint [Complete Guide]</title>
      <link>https://www.gungorbudak.com/blog/2015/05/01/how-to-install-mezzanine-on-ubuntulinux-mint/</link>
      <pubDate>Fri, 01 May 2015 16:08:33 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/05/01/how-to-install-mezzanine-on-ubuntulinux-mint/</guid>
      <description>Mezzanine is a CMS application built on Django web framework. The installation steps are easy but your environment may not just suitable enough for it work without a problem. So, here I&amp;rsquo;m going to describe complete installation from scratch on a virtual environment.
First of all, install virtualenv:
$ sudo apt-get install python-virtualenv Then, create a virtual environment:
$ virtualenv testenv And, activate it: $ cd testenv $ source bin/activate</description>
    </item>
    
  </channel>
</rss>
