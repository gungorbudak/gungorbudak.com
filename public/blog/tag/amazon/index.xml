<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>amazon on Güngör Budak</title>
    <link>https://www.gungorbudak.com/blog/tag/amazon/</link>
    <description>Recent content in amazon on Güngör Budak</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Aug 2015 11:00:08 +0300</lastBuildDate><atom:link href="https://www.gungorbudak.com/blog/tag/amazon/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Transfer Files to Your AWS S3 Storage in Linux</title>
      <link>https://www.gungorbudak.com/blog/2015/08/12/transfer-files-to-your-aws-s3-storage-in-linux/</link>
      <pubDate>Wed, 12 Aug 2015 11:00:08 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/08/12/transfer-files-to-your-aws-s3-storage-in-linux/</guid>
      <description>Uploading files to an AWS S3 storage can be difficult through the GUI with many files included or if your files are in a server where you don&amp;rsquo;t have a GUI option. Use following tool to transfer files to an S3 bucket.
Download following tool and install:
cd ~/Downloads git clone https://github.com/s3tools/s3cmd.git cd s3cmd/ sudo python setup.py install Next, execute following to create a configuration file to connect to your AWS S3 account:</description>
    </item>
    
    <item>
      <title>Running Script on Cluster (StarCluster)</title>
      <link>https://www.gungorbudak.com/blog/2015/05/27/running-script-on-cluster-starcluster/</link>
      <pubDate>Wed, 27 May 2015 15:59:32 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/05/27/running-script-on-cluster-starcluster/</guid>
      <description>Start a new cluster with the configuration file you modified:
starcluster start cluster_name Send the script to the running cluster:
starcluster put cluster_name myscr.csh /home/myscr.csh Run it using source:
starcluster sshmaster cluster_name &amp;quot;source /home/myscr.csh &amp;gt;&amp;amp; /home/myscr.log&amp;quot; </description>
    </item>
    
    <item>
      <title>Uploading Files to AWS using SSH/SCP</title>
      <link>https://www.gungorbudak.com/blog/2015/05/09/uploading-files-to-aws-using-sshscp/</link>
      <pubDate>Sat, 09 May 2015 15:18:12 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/05/09/uploading-files-to-aws-using-sshscp/</guid>
      <description>Here is a small command for uploading files to AWS through SSH&amp;rsquo;s command scp (secure copy).
scp -i path/to/your/key-pairs/file path/to/file/you/want/to/upload ubuntu@PUBLIC_DNS:path/to/the/destination </description>
    </item>
    
    <item>
      <title>Configuring Mezzanine for Apache server &amp; mod_wsgi in AWS</title>
      <link>https://www.gungorbudak.com/blog/2015/05/09/configuring-mezzanine-for-apache-server-modwsgi/</link>
      <pubDate>Sat, 09 May 2015 13:21:59 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/05/09/configuring-mezzanine-for-apache-server-modwsgi/</guid>
      <description>Install [Mezzanine]({% post_url 2015-05-01-how-to-install-mezzanine-on-ubuntulinux-mint %}), [Apache server]({% post_url 2015-05-08-getting-started-with-your-aws-instance-and %}) and mod_wsgi:
sudo apt-get install libapache2-mod-wsgi sudo a2enmod wsgi Set up a MySQL database for your Mezzanine project
Read [my post on how to set up a MySQL database for a Mezzanine project]({% post_url 2015-05-09-how-to-set-up-a-mysql-database-for-a-mezzanine %})
Collect static files:
python manage.py collectstatic Configure your Apache server configuration for the project like following:
WSGIPythonPath /home/ubuntu/www/mezzanine-project &amp;lt;VirtualHost *:80&amp;gt; #ServerName example.com ServerAdmin admin@example.com DocumentRoot /home/ubuntu/www/mezzanine-project WSGIScriptAlias / /home/ubuntu/www/mezzanine-project/wsgi.</description>
    </item>
    
    <item>
      <title>Setting Up Mezzanine Projects in AWS</title>
      <link>https://www.gungorbudak.com/blog/2015/05/08/setting-up-mezzanine-projects-in-aws/</link>
      <pubDate>Fri, 08 May 2015 13:40:27 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/05/08/setting-up-mezzanine-projects-in-aws/</guid>
      <description>Go to EC2 management console, Security groups and add a Custom TCP inbound rule with port 8000. Select &amp;ldquo;Anywhere&amp;rdquo; from the list.
Then follow [this to install Mezzanine]({% post_url 2015-05-01-how-to-install-mezzanine-on-ubuntulinux-mint %})
Above tutorial is also explains setting up a site record. Mezzanine default site record is 127.0.0.1:8000 which should be 0.0.0.0:8000 in our case. So, enter 0.0.0.0:8000 when you’re asked to enter a site record when you ru
python manage.py createdb Also, you might still need to provide this site record while running the development server:</description>
    </item>
    
    <item>
      <title>Getting Started with Your AWS Instance and Installing and Setting Up an Apache Server</title>
      <link>https://www.gungorbudak.com/blog/2015/05/08/getting-started-with-your-aws-instance-and/</link>
      <pubDate>Fri, 08 May 2015 11:12:06 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/05/08/getting-started-with-your-aws-instance-and/</guid>
      <description>Update and upgrade packages:
sudo apt-get update sudo apt-get upgrade Install Apache server:
sudo apt-get install apache2 Set up a root folder in home folder and create an index file for testing:
mkdir ~/www echo ‘Hello, World!’ &amp;gt; ~/www/index.html Set up your virtual host:
sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/000-www.conf sudo nano /etc/apache2/sites-available/000-www.conf Modify DocumentRoot to point your &amp;ldquo;www&amp;rdquo; folder in home folder (e.g. /home/ubuntu/www)
And add following lines after DocumentRoot line:</description>
    </item>
    
    <item>
      <title>AWS Start an Instance and Connect to it</title>
      <link>https://www.gungorbudak.com/blog/2015/05/08/aws-start-an-instance-and-connect-to-it/</link>
      <pubDate>Fri, 08 May 2015 10:41:02 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2015/05/08/aws-start-an-instance-and-connect-to-it/</guid>
      <description>Go to EC2 management console
Create a new key-pair if necessary and download it
Launch an instance
Add HTTP security group for web applications over HTTP
Get public DNS
Change permissions on key-pair file:
chmod 400 path/to/your/file.pem Connect:
ssh -i path/to/your/file.pem ubuntu@PUBLIC_DNS Note: ubuntu is for connecting an Ubuntu 64 bit instance. It’s different for others</description>
    </item>
    
  </channel>
</rss>
