<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unix on Güngör Budak</title>
    <link>https://www.gungorbudak.com/blog/tag/unix/</link>
    <description>Recent content in unix on Güngör Budak</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 09 Aug 2012 09:14:00 +0300</lastBuildDate><atom:link href="https://www.gungorbudak.com/blog/tag/unix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MegaBLAST Sonuclarini Incelemek - Parsing</title>
      <link>https://www.gungorbudak.com/blog/2012/08/09/megablast-sonuclarini-incelemek-parsing/</link>
      <pubDate>Thu, 09 Aug 2012 09:14:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/08/09/megablast-sonuclarini-incelemek-parsing/</guid>
      <description>Pipeline&amp;rsquo;da son asama, aranan dizilerin urettigi ciktilari baska bir script ile incelemek. Bu islemle herbir megablast dosyasi okunuyor, ve dizilerin name, identity, overlapping length gibi parametrelerinin degerleri saklanarak amaca yonelik sekilde ekrana yazdiriliyor.
Projemde HUSAR paketinde bulunan ve yukarida bahsettigim alanlari bana dizi olarak donduren Inslink adinda bir parser kullaniyorum. Bu parserin yaptigi tek sey, dosyayi okumak ve dosyadaki istenen alanlarin degerlerini saklamak.
Daha sonra ben bu saklanan degerleri, koda eklemeler yaparak gosteriyorum ve birkac ek kod ile de ihtiyacim olan anlamli sonuclar gosteriyorum.</description>
    </item>
    
    <item>
      <title>Unix&#39;te Perl Ile Bir Komut Ciktisini Okumak ve Duzenli Ifadeler</title>
      <link>https://www.gungorbudak.com/blog/2012/07/23/unixte-perl-ile-bir-komut-ciktisini-okumak/</link>
      <pubDate>Mon, 23 Jul 2012 05:06:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/07/23/unixte-perl-ile-bir-komut-ciktisini-okumak/</guid>
      <description>Daha once organizma isimlerini duzenli ifadelerle nasil cikardigimi anlatmistim. Burada, gene benzer bir seyden bahsedecegim ancak bu biraz daha fazla, ozel bir teknikle Perl&amp;rsquo;de yapilan, veri tabanindan bilgileri birden fazla satir halinde cikti olarak aldigim icin gerek duydugum cok yararli bir yontem. Mutlaka benzerini baska amaclarla da kullanabilir, yararlanabilirsiniz.
Bu ihtiyac, HUSAR gurubu tarafindan olusturulan honest veritabaninin organizma isimlerini direkt sunmamasi ancak birkac satir halinde gostermesi sebebiyle dogdu. Asagida bunun ornegini gorebilirsiniz.</description>
    </item>
    
    <item>
      <title>Duzenli Ifadeler ile Tur Ismini Elde Etmek</title>
      <link>https://www.gungorbudak.com/blog/2012/07/23/duzenli-ifadeler-ile-tur-ismini-elde/</link>
      <pubDate>Mon, 23 Jul 2012 04:19:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/07/23/duzenli-ifadeler-ile-tur-ismini-elde/</guid>
      <description>Projemin sonunda kullaniciya olasi kirleten organizmalarin adlarini (Latince tur isimleri) gosterecegim icin, MegaBLAST sonuclarindaki erisim numaralarini (accession number) kullanarak her dizi icin organizma adlarini elde etmem gerekiyor. Sequence Retrival System (SRS) adinda, HUSAR sunucularinda bulunan baska bir sistem ile bunu yapabiliyorum.
SRS&amp;rsquo;ten organizma adini ogrenebilmem icin Unix komut satirinda &amp;ldquo;getz&amp;rdquo; komutuyla birlikte veritabani ismi, erisim numarasi ve ogrenmek istedigim alani yazmam yetiyor. Asagida, bu isi yapabilen ornek bir kod bulabilirsiniz.</description>
    </item>
    
    <item>
      <title>FASTQ Formatı - FASTQ Dosyası</title>
      <link>https://www.gungorbudak.com/blog/2012/06/25/fastq-format-fastq-dosyasi/</link>
      <pubDate>Mon, 25 Jun 2012 11:01:00 +0300</pubDate>
      
      <guid>https://www.gungorbudak.com/blog/2012/06/25/fastq-format-fastq-dosyasi/</guid>
      <description>Bugün programı oluştururken kullanacağım &amp;ldquo;test&amp;rdquo; dizilimini aldım. İki adet FASTQ dosyasından oluşuyor, her biri sıkıştırılmış ama buna rağmen boyutları 6 GB civarı. Ben elbette çok zaman kaybetmek istemediğim için bu dosyalardan birinin sadece bir kısmını kullanacağım.
Amacım, bu FASTQ dosyalarındaki eşleşebilen okumaları BWA aracı ile bularak, daha sonra onları çıkarmak. Ve kalan eşleşemeyen okumaları MegaBLAST aracının anlayabileceği bir dilde (FASTA formatında) kaydetmek.
Bu arada tüm projeyi bir Unix bilgisayarda hazırladığım için birçok komut öğreniyorum, daha sonra bunları ayrıca yazmaya çalışacağım.</description>
    </item>
    
  </channel>
</rss>
